apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka'

dependencies {
  compileOnly gradleApi()
  api deps.kotlin.gradlePlugin

  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation gradleTestKit()
}

test {
  dependsOn(':molecule-gradle-plugin:publishAllPublicationsToInstallLocallyRepository')
  dependsOn(':molecule-runtime:publishAllPublicationsToInstallLocallyRepository')
  dependsOn(':molecule-testing:publishAllPublicationsToInstallLocallyRepository')

  inputs.dir('src/test/fixtures')

  testLogging {
    if (System.getenv("CI") == "true") {
      events = ["failed", "skipped", "passed"]
    }
    exceptionFormat "full"
  }
}

gradlePlugin {
  plugins {
    molecule {
      id = "app.cash.molecule"
      displayName = "Molecule"
      description = "Molecule Gradle plugin"
      implementationClass = "app.cash.molecule.gradle.MoleculePlugin"
    }
  }
}

def versionDirectory = "$buildDir/generated/version/"

sourceSets {
  main.java.srcDir versionDirectory
}

task pluginVersion {
  def outputDir = file(versionDirectory)

  inputs.property 'composeVersion', versions.compose
  inputs.property 'moleculeVersion', project.version
  outputs.dir outputDir

  doLast {
    def versionFile = file("$outputDir/app/cash/molecule/gradle/version.kt")
    versionFile.parentFile.mkdirs()
    versionFile.text = """// Generated file. Do not edit!
package app.cash.molecule.gradle

internal const val composeVersion = "${versions.compose}"
internal const val moleculeVersion = "${project.version}"
"""
  }
}

tasks.getByName('compileKotlin').dependsOn('pluginVersion')
