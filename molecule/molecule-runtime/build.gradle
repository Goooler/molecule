import org.jetbrains.kotlin.gradle.plugin.KotlinPluginKt
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'org.jetbrains.dokka'

kotlin {
  android {
    publishLibraryVariants('release')
  }

  iosArm64()
  iosSimulatorArm64()
  iosX64()

  js {
    nodejs()
  }
  jvm()

  linuxX64()

  macosArm64()
  macosX64()

  mingwX64()

  tvosArm64()
  tvosSimulatorArm64()
  tvosX64()

  watchosArm64()
  watchosSimulatorArm64()
  watchosX64()

  sourceSets {
    commonMain {
      dependencies {
        api libs.compose.runtime
        api libs.kotlinx.coroutines.core
      }
    }
    commonTest {
      dependencies {
        implementation libs.kotlin.test
      }
    }
    commonJvmTest {
      dependencies {
        implementation libs.kotlinx.coroutines.test
      }
    }

    androidMain {
      dependencies {
        implementation libs.androidx.core
      }
    }
    androidTest {
      dependsOn(commonJvmTest)
    }
    jvmTest {
      dependsOn(commonJvmTest)
    }
  }
}

dependencies {
  androidTestImplementation libs.androidx.test.runner
  androidTestImplementation libs.kotlin.test
  androidTestImplementation libs.kotlinx.coroutines.test

  add(KotlinPluginKt.PLUGIN_CLASSPATH_CONFIGURATION_NAME, libs.compose.compiler)
}

android {
  sourceSets {
    androidTest {
      java.srcDirs += 'src/commonJvmTest/kotlin'
    }
  }

  defaultConfig {
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  packagingOptions {
    exclude 'META-INF/AL2.0'
    exclude 'META-INF/LGPL2.1'
  }
}

spotless {
  kotlin {
    targetExclude(
      // Apache 2-licensed files from AOSP.
      "src/androidMain/kotlin/app/cash/molecule/AndroidUiDispatcher.kt",
      "src/androidMain/kotlin/app/cash/molecule/AndroidUiFrameClock.kt",
    )
  }
}
